/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package supermarket;

import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author helal
 */
public class Splash extends javax.swing.JFrame {

    /**
     * Creates new form Splash
     */
    public Splash() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        percentage = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        progressbar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("         Taiyeba Cosmetics");

        percentage.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        percentage.setForeground(new java.awt.Color(255, 255, 255));
        percentage.setText("%");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/shopping-carts.png"))); // NOI18N

        progressbar.setForeground(new java.awt.Color(102, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(178, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(percentage)
                        .addGap(192, 192, 192))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(percentage)
                .addGap(15, 15, 15)
                .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {

        Splash splash = new Splash();
        splash.setVisible(true);
        Hash hash = new Hash();

        try {
            for (int i = 0; i <= 100; i++) {
                Thread.sleep(10);
                splash.progressbar.setValue(i);
                splash.percentage.setText(Integer.toString(i) + " %");
            }
        } catch (InterruptedException e) {
            JOptionPane.showMessageDialog(null, "Something Wrong: " + e);
        }

        //-------------------------------------------------------
        try {

            File file = new File("src/data/MainServer.dat");
            String[] dbData = {"", "", "", ""};
            if (!file.exists()) {
                splash.dispose();
                new DBConnect("Sofware Server Connect").setVisible(true);
            } else {
                try ( Scanner data = new Scanner(file)) {
                    int i = 0;
                    while (data.hasNextLine()) {
                        dbData[i] = hash.decrypt(data.nextLine());
                        i++;
                    }
                    data.close();
                    boolean connect = new ServerDBConnect().checkDriver(dbData[0], dbData[1], dbData[2], dbData[3]);
                    if (connect) {
                        ServerDBConnect.soft_driver = dbData[0];
                        ServerDBConnect.soft_url = dbData[1];
                        ServerDBConnect.soft_user = dbData[2];
                        ServerDBConnect.soft_pass = dbData[3];
                        try {
                            //check licence
                            File licenceFile = new File("src/data/Licence.dat");
                            String licenceData = "";
                            if (!licenceFile.exists()) {
                                new LicenceKeyActivation().setVisible(true);
                                splash.dispose();
                            } else {
                                try ( Scanner licencedata = new Scanner(licenceFile)) {
                                    if (licencedata.hasNextLine()) {
                                        licenceData = licencedata.nextLine();
                                    }
                                    //System.out.println(licenceData);
                                    licencedata.close();
                                    //--------------
                                    ServerDBConnect sdbc = new ServerDBConnect();
                                    boolean check = sdbc.checkLicence(licenceData);

                                    if (check) {
                                        if (LicenceClass.checkExpiredDate() == false) {
                                            if (LicenceClass.checkUserUse() == false) {
                                                DataManage dm = new DataManage();
                                                    try {
                                                        String[] inf = sdbc.getUUID();
                                                        if (sdbc.insertOrUpdateClientUUID(licenceData, inf[0], inf[1])) {
                                                           // System.out.println(LicenceClass.db_support);
                                                           //database support yes
                                                            if (LicenceClass.db_support.equals("Yes")) {
                                                                sdbc.customerDbConnect(licenceData);
                                                            } else {
                                                                System.out.println("Run.......");
                                                                if (dm.fileExist("src/data/data.dat")) {
                                                                    dm.getDbConnected("src/data/data.dat");
                                                                } else {
                                                                    splash.dispose();
                                                                    new DBConnect().setVisible(true);
                                                                }
                                                            }
                                                        }
                                                    } catch (IOException ex) {
                                                        Logger.getLogger(LicenceKeyActivation.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                            } else {
                                                JOptionPane.showConfirmDialog(null, "Your licence have crossed limit of max user.You can't able to use this licence.");
                                            }
                                        } else {
                                            JOptionPane.showConfirmDialog(null, "Licence date is Expired, Please Renew licence.");
                                        }
                                        splash.dispose();

                                        //new LicenceKeyActivation().setVisible(true);
                                        //splash.dispose();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Your Licence key is invalid ");
                                        new LicenceKeyActivation().setVisible(true);
                                        new Splash().dispose();
                                    }

                                    //-----------
                                }

                            }
                        } catch (IOException e) {
                            System.out.println("An error occurred.");
                            e.printStackTrace();
                        }
//                        new LicenceKeyActivation().setVisible(true);
//                        splash.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, "Your database  Connection is lost.Please connect again ");
                        new DBConnect("Sofware Server Connect").setVisible(true);
                        splash.dispose();
                    }
                }

            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
//----------------------------------------------------------------
//        try {
//            
//            File file = new File("src/data/data.dat");
//            String[] dbData = {"", "", "", ""};
//            if (!file.exists()) {
//                splash.dispose();
//                new DBConnect().setVisible(true);
//                
//            } else {
//                try ( Scanner data = new Scanner(file)) {
//                    int i = 0;
//                    while (data.hasNextLine()) {
//                        dbData[i] = hash.decrypt(data.nextLine());
//                        i++;
//                    }
//                    data.close();
//                    boolean connect = new DatabaseConector().checkDriver(dbData[0], dbData[1], dbData[2], dbData[3]);
//                    if (connect) {
//                        DatabaseConector.driver=dbData[0];
//                        DatabaseConector.url=dbData[1];
//                        DatabaseConector.user=dbData[2];
//                        DatabaseConector.pass=dbData[3];
//                        if (new DatabaseConector().checkAdmin()==true) {
//                            new Login().setVisible(true);
//                        }else{
//                            new AddAdmin().setVisible(true);
//                        }
//                        splash.dispose();
//                    } else {
//                        JOptionPane.showMessageDialog(null, "Your database  Connection is lost.Please connect again ");
//                        new DBConnect().setVisible(true);
//                        splash.dispose();
//                    }
//                }
//
//            }
//        } catch (IOException e) {
//            System.out.println("An error occurred.");
//            e.printStackTrace();
//        }
//         splash.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel percentage;
    private javax.swing.JProgressBar progressbar;
    // End of variables declaration//GEN-END:variables
}
